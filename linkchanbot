#!/usr/bin/python
"""
This is a Telegram Bot which sanitises and substitutes share links
for lightweight, privacy respecting proxy alternatives.
"""

from telegram import (
    MessageEntity,
    ParseMode,
    InlineQueryResultArticle,
    InputTextMessageContent,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Updater,
    Filters,
    MessageHandler,
    CommandHandler,
    InlineQueryHandler,
    ChosenInlineResultHandler,
)
from telegram.constants import MAX_INLINE_QUERY_RESULTS as MAX_RESULTS
from telegram import error
from dotenv import load_dotenv

from urllib.parse import urlparse, urlencode, parse_qs
import logging.handlers
import argparse
import configparser
import functools
import json
import os
import pathlib
import random
import shutil
import signal
import sys
import threading


# Constants

VERSION = "1.0.0"

TEMPLATE = """
{new}
<a href="{old}">source</a>
"""

EXAMPLES = {
    "Twitter": [
        "https://twitter.com/BeautyOfSpace/status/332490279376519169",
        "https://twitter.com/anvxmes/status/1375175567587356673",
        "https://twitter.com/Chrisvb700/status/1373169970117496833",
    ],
    "YouTube": [
        "https://www.youtube.com/watch?v=J---aiyznGQ#",
        "https://www.youtube.com/watch?v=KmtzQCSh6xk",
        "https://www.youtube.com/watch?v=9Gj47G2e1Jc",
    ],
    "Instagram": [
        "https://www.instagram.com/p/B-b-POVFb1r/",
        "https://www.instagram.com/p/CMW0Fx6lum6/",
        "https://www.instagram.com/p/CL_vMidl_W2/",
    ],
    "Reddit": [
        "https://www.reddit.com/r/wallpaper/comments/mctm44/dope19201080/",
        "https://www.reddit.com/r/wallpaper/comments/m98fnz/great_art_by_mike_fazbear_3840x2160/",
        "https://www.reddit.com/r/reddit.com/comments/17913/reddit_now_supports_comments/c51/",
    ],
    "Medium": [
        "https://medium.com/@nikitonsky/medium-is-a-poor-choice-for-blogging-bb0048d19133",
        "https://medium.com/@ftrain/big-data-small-effort-b62607a43a8c",
        "https://medium.com/@swalahamani/the-art-of-computer-programming-9fbd8fd56265",
    ],
}


def whitelist_chat(upd) -> bool:
    bot_channel_id = os.environ.get("LINKCHAN_CHAT_ID")
    # There is a channel ID set, and the message is not from the channel
    try:
        if bot_channel_id and upd.message.chat_id not in map(
            int, bot_channel_id.replace(" ", "").split(",")
        ):
            # Will have been logged as [ukn] in @logged
            print(f"Message from {upd.message.chat_id} not whitelisted")
            return False
    except:
        assert False, "Invalid `LINKCHAN_CHAT_ID`"
    print(f"Message from {upd.message.chat_id} whitelisted")
    return True


# Initialisation


def args():
    """
    Parse command-line arguments. Provide basic help interface.
    """
    parser = argparse.ArgumentParser(
        prog="linkchanbot",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="A Telegram bot that substitutes common share link with\n"
        "lightweight, privacy respecting proxy alternatives.",
        epilog=f"linkchanbot {VERSION}",
    )
    parser.add_argument(
        "-v", "--version", help="print version and exit", action="store_true"
    )
    parser.add_argument("-l", "--logfile", help="specify the log file")

    args = parser.parse_args()

    if args.version:
        stderr(f"linkchanbot {VERSION}")
        exit(0)

    return args


def init(args):
    """
    Loads configuration from config files and environment variables.
    To be called before main logic.

    Has side effects.  See globals below.
    """
    load_dotenv()
    # Filesystem
    cache_home = pathlib.Path(
        os.getenv("XDG_CACHE_HOME", os.getenv("HOME") + "/.cache")
    )
    cache_dir = cache_home / "linkchan"
    cache_dir.mkdir(parents=True, exist_ok=True)  # EFFECT

    config_home = pathlib.Path(
        os.getenv("XDG_CONFIG_HOME", os.getenv("HOME") + "/.config")
    )
    config_dir = config_home / "linkchan"
    config_dir.mkdir(parents=True, exist_ok=True)  # EFFECT

    sys_share_dir = pathlib.Path("/usr/local/share/linkchan")

    config_files = ("bot.cfg", "alts.json", "services.json")

    # Copy system global config files to local XDG config dir.
    # Fail if files not found.
    for file in config_files:
        locfile = config_dir / file
        sysfile = sys_share_dir / file

        if locfile.is_file():
            continue
        else:
            if sysfile.is_file():
                shutil.copy(sysfile, locfile)
            else:
                stderr(
                    f"Error: config file '{file}' not found in"
                    f"'{config_dir}' or '{sys_share_dir}'",
                )
                exit(1)

    # Logging
    LOGFILE = args.logfile or os.getenv("LINKCHAN_LOGFILE") or cache_dir / "log"

    try:
        handler = logging.handlers.WatchedFileHandler(LOGFILE)
    except FileNotFoundError as e:
        stderr("Error: logfile:", e)
        exit(1)

    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO,
        handlers=(handler,),
    )

    # Config
    TOKEN = os.getenv("LINKCHAN_TOKEN")
    ADMIN = os.getenv("LINKCHAN_ADMIN")

    BOT_CFG = configparser.ConfigParser()
    BOT_CFG.read(config_dir / "bot.cfg")

    TOKEN = TOKEN or BOT_CFG.get("auth", "token", fallback=False)
    ADMIN = ADMIN or BOT_CFG.get("auth", "admin", fallback=False)

    if not TOKEN:
        stderr("Error: No bot token provided")
        exit(1)

    global ALTS
    global SERVICES

    try:
        with open(config_dir / "alts.json", "r") as file:
            ALTS = json.load(file)
        with open(config_dir / "services.json", "r") as file:
            SERVICES = json.load(file)
    except FileNotFoundError as e:
        stderr("Error: Missing config file:", e)
        exit(1)
    except json.decoder.JSONDecodeError as e:
        stderr(
            f"Error: JSON syntax error in '{file.name}':",
            e,
        )
        exit(1)

    # Validate ALTS
    for altsite, alt in ALTS.items():
        if "service" not in alt:
            logging.warn(f"alts.json: '{altsite}' has no 'service' value, ignored")

    return TOKEN, ADMIN, LOGFILE


# Util


def stderr(*args, **kwargs):
    """
    Prints to stderr.
    """
    print(*args, **kwargs, file=sys.stderr)


def logged(old_cb_func):
    """
    Wraps callback functions, logs incomming telegram updates.
    """

    @functools.wraps(old_cb_func)
    def new_cb_func(upd, ctx, **kwargs):
        if upd.message and upd.message.text:
            status = mk_status(upd, "msg", "<:", oneline(upd.message.text))
        elif upd.message and upd.message.caption:
            status = mk_status(upd, "cap", "<:", oneline(upd.message.caption))
        elif upd.message:
            status = mk_status(upd, "msg", "#:", upd.effective_message)
        elif upd.chosen_inline_result:
            status = mk_status(
                upd, "cir", "::", oneline(upd.chosen_inline_result.result_id)
            )
        elif upd.inline_query:
            status = mk_status(upd, "ilq", "?:", oneline(upd.inline_query.query))
        elif upd.effective_message:
            status = mk_status(upd, "ukn", "#:", upd.effective_message)
        else:
            status = mk_status(upd, "ukn", "#:")

        logging.info(status)
        print(status)

        return old_cb_func(upd, ctx, **kwargs)

    return new_cb_func


def mk_status(upd, utype, dl="::", text=None):
    """
    Prepares a standardised string for logging.
    Called by wrapped callbacks (see @logged)
    or by callbacks for terminal output.
    """
    uid = upd.update_id
    if upd.effective_user:
        user_id = upd.effective_user.id
        user_name = upd.effective_user.name
    elif upd.channel_post and upd.channel_post.from_user:
        user_id = upd.channel_post.from_user.id
        user_name = upd.channel_post.from_user.name
    elif upd.poll:
        user_id = "<poll>"
        user_name = "<poll>"
    else:
        user_id = "<unknown>"
        user_name = "<unknown>"

    chat = upd.effective_chat
    if chat:
        chat_id = chat.id
        try:
            chat_name = chat.link or chat.title or chat.full_name
        except AttributeError:
            chat_name = None
        chat_name = chat_name.replace("https://t.me/", "@")
    else:
        chat_id = "#"
        chat_name = "#"

    if not text:
        if upd.effective_message:
            text = upd.effective_message
        else:
            text = "?"

    status = f"{uid} [{utype}] - {user_id} <{user_name}> - {chat_id} ({chat_name}) - {dl} {text}"
    return status


@functools.cache
def mk_newlinks(link):
    """
    The core logic of link substitution.
    Given a link, returns either:
        [str...]    A list of new links.
        [False]     A list with a single False element.
    """
    # Prepare and parse link string
    if not link.startswith("https://") and not link.startswith("http://"):
        link = "https://" + link

    url = urlparse(link)

    # Enforce HTTPS
    url = url._replace(scheme="https")

    # Recognise service
    if url.netloc in SERVICES.keys():
        service = url.netloc
    else:
        for main_domain, service_data in SERVICES.items():
            if url.netloc in service_data["alt_domains"]:
                service = main_domain
                break
        else:
            # Fail if service is unrecognised
            return [False]

    # Keep only allowed URL queries
    allowed_queries = SERVICES[service].get("query_whitelist") or []
    old_queries = parse_qs(url.query, keep_blank_values=True)
    new_queries = {
        query: v for (query, v) in old_queries.items() if query in allowed_queries
    }
    url = url._replace(query=urlencode(new_queries, doseq=True))

    # Find alts for replacing `service`
    applicable_alts = {
        altsite: alt for (altsite, alt) in ALTS.items() if alt.get("service") == service
    }

    # Make new substitutes
    newlinks = list(
        map(
            lambda newdomain: url._replace(netloc=newdomain).geturl(),
            applicable_alts.keys(),
        )
    )

    return newlinks


@functools.cache
def oneline(s: str) -> str:
    """
    Converts newlines and tabs to ASCII representations.
    """
    s = s.replace("\\", "\\\\")
    return s.replace("\n", "\\n").replace("\t", "\\t")


# Callback Handlers


@logged
def cb_start(upd, ctx):
    """
    /start callback
    """

    if not whitelist_chat(upd):
        return

    bot_username = ctx.bot.get_me().username.replace("_", "\\_")

    # outgoing text
    msg = f"""
@{bot_username} فقط ارسل رسالة يوجد بها احد الخدمات المدعومة و سوف يتم ارسال روابط الخدمات التي ارسلتها مستبدلة بخدمات أسس.
الخدمات المدعومة _Twitter_, _YouTube_, _Instagram_, _Reddit_, and _Medium_.

انظر ايضآ الى /help, /about
"""

    # Send message
    upd.message.reply_text(
        msg,
        disable_web_page_preview=True,
        parse_mode=ParseMode.MARKDOWN,
        disable_notification=True,
    )


def cb_help(upd, ctx):
    """
    /help callback
    """
    if not whitelist_chat(upd):
        return

    bot_username = ctx.bot.get_me().username.replace("_", "\\_")

    # Outgoing text
    msg = f"""
@{bot_username} يحل محل روابط المشاركة للخدمات الشعبية لبدائل خفيفة الوزن وتحترم الخصوصية ، ويصحح الاستفسارات غير الضرورية وأدوات التتبع.

*طريقة الاستخدام*
انظر الى /start

*الخدمات المدعومة*
- twitter.com => [Nitter](https://nitter.aosus.org)
- youtube.com => [Piped](https://piped.aosus.org)
- instagram.com => [Bibliogram](https://bibliogram.aosus.org)
- reddit.com => [Libreddit](https://libreddit.aosus.org)
- medium.com => [Scribe](https://scribe.aosus.org)

*للمساهمة*
لديك نصيحة او تريد الابلاغ عن مشكلة؟
انظر الى /about
"""

    # Send message
    upd.message.reply_text(
        msg,
        disable_web_page_preview=True,
        parse_mode=ParseMode.MARKDOWN,
        disable_notification=True,
    )


@logged
def cb_about(upd, ctx):
    """
    /about callback
    """
    if not whitelist_chat(upd):
        return

    bot_username = ctx.bot.get_me().username.replace("_", "\\_")

    # Outgoing text
    msg = f"""
@{bot_username}

الاصدار
{VERSION}
الشفرة المصدرية
https://github.com/aosus/aosus-link-chain/tree/aosuslinkchainbot
الكاتب الاساسي
@torresjrjr <b@torresjrjr.com>
الرخصة
GNU Affero General Public License
"""

    # Send message
    upd.message.reply_text(
        msg, parse_mode=ParseMode.MARKDOWN, disable_notification=True
    )


@logged
def cb_link_handler(upd, ctx):
    """
    Handles messages with links (see main > MessageHandler).
    Replies with `TEMPLATE` with new links.
    """
    if not upd.message:
        # Will have been logged as [ukn] in @logged
        return

    if not whitelist_chat(upd):
        return

    links = []

    # Telegram returns message metadata called 'entities'
    # (commands, hashtags, mentions, formatted text, links, etc.).
    # We extract the link entities.
    entities = {}
    entities.update(upd.message.parse_entities())
    entities.update(upd.message.parse_caption_entities())

    for ent, link in entities.items():
        link = oneline(link)
        if ent["type"] == "url":
            links += [link]
        if ent["type"] == "text_link":
            links += [ent["url"]]

    # Filter for links which have substitutes.
    # mk_newlinks() returns either [str...] or [False]
    oldlinks = list(filter(lambda old: mk_newlinks(old)[0], links))

    # Generate corresponding newlinks,
    # by picking the first suggestion from mk_newlinks()
    newlinks = list(map(lambda old: mk_newlinks(old)[0], oldlinks))

    # Send substitutes as separate messages
    for oldlink, newlink in zip(oldlinks, newlinks):
        logging.info(mk_status(upd, "out", "::", f"{newlink}"))

        msg = TEMPLATE.format(new=newlink, old=oldlink)
        upd.message.reply_text(
            msg, parse_mode=ParseMode.HTML, disable_notification=True
        )


@logged
def cb_chosen_inline_result(upd, ctx):
    """
    Callback for chosen inline query results. For logging only.
    See @logged
    """
    pass


def cb_error(update, context):
    try:
        raise context.error
    except error.TelegramError as e:
        print("Error: TelegramError:", e, update)
    except error.ChatMigrated as e:
        print("Error: ChatMigrated:", e, update)
    except error.Conflict as e:
        print("Error: Confict:", e, update)
    except error.InvalidToken as e:
        print("Error: InvalidToken:", e, update)
    except error.RetryAfter as e:
        print("Error: RetryAfter:", e, update)
    except error.Unauthorized as e:
        print("Error: Unauthorized:", e, update)

    except error.NetworkError as e:
        print("Error: NetworkError:", e, update)
    except error.BadRequest as e:
        print("Error: BadRequest:", e, update)
    except error.TimedOut as e:
        print("Error: TimedOut:", e, update)


# Main


def main():
    TOKEN, ADMIN, LOGFILE = init(args())

    # Init bot
    try:
        updater = Updater(TOKEN, use_context=True)
    except error.InvalidToken as e:
        stderr(f"Error: Invalid token '{TOKEN}'")
        exit(1)

    # Test token
    try:
        bot_user = updater.bot.get_me()
    except Unauthorized as e:
        stderr("Error: Faulty token:", e)
        exit(1)

    BOT_USERNAME = bot_user.username
    BOT_ID = bot_user.id

    dp = updater.dispatcher
    dp.add_error_handler(cb_error)

    dp.add_handler(CommandHandler("start", cb_start))
    dp.add_handler(CommandHandler("help", cb_help))
    dp.add_handler(CommandHandler("about", cb_about))

    dp.add_handler(ChosenInlineResultHandler(cb_chosen_inline_result))

    dp.add_handler(
        MessageHandler(
            (
                # non-edited messages
                Filters.update.message
                | Filters.update.channel_post
            )
            & (
                # messages with links
                Filters.entity(MessageEntity.URL)
                | Filters.entity(MessageEntity.TEXT_LINK)
                | Filters.caption_entity(MessageEntity.URL)
                | Filters.caption_entity(MessageEntity.TEXT_LINK)
            )
            & (
                # not messages created via this bot (inline queries, etc.)
                ~Filters.via_bot(username=BOT_USERNAME)
            )
            & ~(
                # not messages from bot forwarded to group chats
                # (forwarded to bot's private chat is OK)
                Filters.forwarded_from(username=BOT_USERNAME)
                & ~Filters.chat_type.private
            ),
            cb_link_handler,
        )
    )

    if ADMIN:
        # Admin callbacks
        # See: https://github.com/python-telegram-bot/python-telegram-bot/wiki/Code-snippets/1c6ab0d3324a83de2a0a41910491211be2ffb46b#simple-way-of-restarting-the-bot
        def stop_and_restart():
            """
            Gracefully stop the updater
            and replace the current process with a new one.
            Called by cb_restart().
            """
            # `updater` in scope of function definition
            updater.stop()
            return os.execl(sys.executable, sys.executable, *sys.argv)

        @logged
        def cb_restart(upd, ctx):
            """
            /restart callback. Restarts the bot.
            See handler for authorisation.
            """
            status = mk_status(upd, "cmd", "::", "Authorised - restarting bot...")
            logging.info(status)
            print(status)
            upd.message.reply_text(status)

            return threading.Thread(target=stop_and_restart).start()

        @logged
        def cb_shutdown(upd, ctx):
            """
            /shutdown callback. Shuts down the bot.
            See handler for authorisation.
            """
            status = mk_status(upd, "cmd", "::", "Authorised - shutdown SIGINT")
            logging.info(status)
            print(status)
            upd.message.reply_text(status)

            os.kill(os.getpid(), signal.SIGINT)

        # Admin handlers
        dp.add_handler(
            CommandHandler("restart", cb_restart, filters=Filters.user(username=ADMIN))
        )
        dp.add_handler(
            CommandHandler(
                "shutdown", cb_shutdown, filters=Filters.user(username=ADMIN)
            )
        )

    # Start serving
    stderr(f"linkchanbot {VERSION}")
    stderr(f"logfile: {LOGFILE}")
    stderr(f"bot: {BOT_ID} <@{BOT_USERNAME}>")
    stderr("Bot serving...")

    updater.start_polling()
    updater.idle()

    stderr("Bot stopped.")
    return


if __name__ == "__main__":
    main()
